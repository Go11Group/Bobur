// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: skills.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SkillsService_CreateSkill_FullMethodName = "/protos.SkillsService/CreateSkill"
	SkillsService_UpdateSkill_FullMethodName = "/protos.SkillsService/UpdateSkill"
	SkillsService_DeleteSkill_FullMethodName = "/protos.SkillsService/DeleteSkill"
	SkillsService_GetSkill_FullMethodName    = "/protos.SkillsService/GetSkill"
	SkillsService_GetSkills_FullMethodName   = "/protos.SkillsService/GetSkills"
)

// SkillsServiceClient is the client API for SkillsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SkillsServiceClient interface {
	CreateSkill(ctx context.Context, in *CreateSkillRequest, opts ...grpc.CallOption) (*Skill, error)
	UpdateSkill(ctx context.Context, in *UpdateSkillRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteSkill(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetSkill(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Skill, error)
	GetSkills(ctx context.Context, in *SkillFilter, opts ...grpc.CallOption) (*Skills, error)
}

type skillsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSkillsServiceClient(cc grpc.ClientConnInterface) SkillsServiceClient {
	return &skillsServiceClient{cc}
}

func (c *skillsServiceClient) CreateSkill(ctx context.Context, in *CreateSkillRequest, opts ...grpc.CallOption) (*Skill, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Skill)
	err := c.cc.Invoke(ctx, SkillsService_CreateSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) UpdateSkill(ctx context.Context, in *UpdateSkillRequest, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, SkillsService_UpdateSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) DeleteSkill(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, SkillsService_DeleteSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) GetSkill(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Skill, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Skill)
	err := c.cc.Invoke(ctx, SkillsService_GetSkill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skillsServiceClient) GetSkills(ctx context.Context, in *SkillFilter, opts ...grpc.CallOption) (*Skills, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Skills)
	err := c.cc.Invoke(ctx, SkillsService_GetSkills_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkillsServiceServer is the server API for SkillsService service.
// All implementations must embed UnimplementedSkillsServiceServer
// for forward compatibility
type SkillsServiceServer interface {
	CreateSkill(context.Context, *CreateSkillRequest) (*Skill, error)
	UpdateSkill(context.Context, *UpdateSkillRequest) (*Void, error)
	DeleteSkill(context.Context, *ById) (*Void, error)
	GetSkill(context.Context, *ById) (*Skill, error)
	GetSkills(context.Context, *SkillFilter) (*Skills, error)
	mustEmbedUnimplementedSkillsServiceServer()
}

// UnimplementedSkillsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSkillsServiceServer struct {
}

func (UnimplementedSkillsServiceServer) CreateSkill(context.Context, *CreateSkillRequest) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkill not implemented")
}
func (UnimplementedSkillsServiceServer) UpdateSkill(context.Context, *UpdateSkillRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkill not implemented")
}
func (UnimplementedSkillsServiceServer) DeleteSkill(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkill not implemented")
}
func (UnimplementedSkillsServiceServer) GetSkill(context.Context, *ById) (*Skill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkill not implemented")
}
func (UnimplementedSkillsServiceServer) GetSkills(context.Context, *SkillFilter) (*Skills, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkills not implemented")
}
func (UnimplementedSkillsServiceServer) mustEmbedUnimplementedSkillsServiceServer() {}

// UnsafeSkillsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SkillsServiceServer will
// result in compilation errors.
type UnsafeSkillsServiceServer interface {
	mustEmbedUnimplementedSkillsServiceServer()
}

func RegisterSkillsServiceServer(s grpc.ServiceRegistrar, srv SkillsServiceServer) {
	s.RegisterService(&SkillsService_ServiceDesc, srv)
}

func _SkillsService_CreateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).CreateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_CreateSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).CreateSkill(ctx, req.(*CreateSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_UpdateSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).UpdateSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_UpdateSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).UpdateSkill(ctx, req.(*UpdateSkillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_DeleteSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).DeleteSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_DeleteSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).DeleteSkill(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_GetSkill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).GetSkill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_GetSkill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).GetSkill(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _SkillsService_GetSkills_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkillFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkillsServiceServer).GetSkills(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SkillsService_GetSkills_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkillsServiceServer).GetSkills(ctx, req.(*SkillFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// SkillsService_ServiceDesc is the grpc.ServiceDesc for SkillsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SkillsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SkillsService",
	HandlerType: (*SkillsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSkill",
			Handler:    _SkillsService_CreateSkill_Handler,
		},
		{
			MethodName: "UpdateSkill",
			Handler:    _SkillsService_UpdateSkill_Handler,
		},
		{
			MethodName: "DeleteSkill",
			Handler:    _SkillsService_DeleteSkill_Handler,
		},
		{
			MethodName: "GetSkill",
			Handler:    _SkillsService_GetSkill_Handler,
		},
		{
			MethodName: "GetSkills",
			Handler:    _SkillsService_GetSkills_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "skills.proto",
}
