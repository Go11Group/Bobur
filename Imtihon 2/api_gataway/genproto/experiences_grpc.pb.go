// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: experiences.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ExperiencesService_CreateExperience_FullMethodName = "/protos.ExperiencesService/CreateExperience"
	ExperiencesService_UpdateExperience_FullMethodName = "/protos.ExperiencesService/UpdateExperience"
	ExperiencesService_DeleteExperience_FullMethodName = "/protos.ExperiencesService/DeleteExperience"
	ExperiencesService_GetExperience_FullMethodName    = "/protos.ExperiencesService/GetExperience"
	ExperiencesService_GetExperiences_FullMethodName   = "/protos.ExperiencesService/GetExperiences"
)

// ExperiencesServiceClient is the client API for ExperiencesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperiencesServiceClient interface {
	CreateExperience(ctx context.Context, in *CreateExperienceRequest, opts ...grpc.CallOption) (*Experience, error)
	UpdateExperience(ctx context.Context, in *UpdateExperienceRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Experience, error)
	GetExperiences(ctx context.Context, in *ExperienceFilter, opts ...grpc.CallOption) (*Experiences, error)
}

type experiencesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperiencesServiceClient(cc grpc.ClientConnInterface) ExperiencesServiceClient {
	return &experiencesServiceClient{cc}
}

func (c *experiencesServiceClient) CreateExperience(ctx context.Context, in *CreateExperienceRequest, opts ...grpc.CallOption) (*Experience, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Experience)
	err := c.cc.Invoke(ctx, ExperiencesService_CreateExperience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experiencesServiceClient) UpdateExperience(ctx context.Context, in *UpdateExperienceRequest, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ExperiencesService_UpdateExperience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experiencesServiceClient) DeleteExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Void)
	err := c.cc.Invoke(ctx, ExperiencesService_DeleteExperience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experiencesServiceClient) GetExperience(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Experience, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Experience)
	err := c.cc.Invoke(ctx, ExperiencesService_GetExperience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experiencesServiceClient) GetExperiences(ctx context.Context, in *ExperienceFilter, opts ...grpc.CallOption) (*Experiences, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Experiences)
	err := c.cc.Invoke(ctx, ExperiencesService_GetExperiences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperiencesServiceServer is the server API for ExperiencesService service.
// All implementations must embed UnimplementedExperiencesServiceServer
// for forward compatibility
type ExperiencesServiceServer interface {
	CreateExperience(context.Context, *CreateExperienceRequest) (*Experience, error)
	UpdateExperience(context.Context, *UpdateExperienceRequest) (*Void, error)
	DeleteExperience(context.Context, *ById) (*Void, error)
	GetExperience(context.Context, *ById) (*Experience, error)
	GetExperiences(context.Context, *ExperienceFilter) (*Experiences, error)
	mustEmbedUnimplementedExperiencesServiceServer()
}

// UnimplementedExperiencesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperiencesServiceServer struct {
}

func (UnimplementedExperiencesServiceServer) CreateExperience(context.Context, *CreateExperienceRequest) (*Experience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperience not implemented")
}
func (UnimplementedExperiencesServiceServer) UpdateExperience(context.Context, *UpdateExperienceRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperience not implemented")
}
func (UnimplementedExperiencesServiceServer) DeleteExperience(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperience not implemented")
}
func (UnimplementedExperiencesServiceServer) GetExperience(context.Context, *ById) (*Experience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperience not implemented")
}
func (UnimplementedExperiencesServiceServer) GetExperiences(context.Context, *ExperienceFilter) (*Experiences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiences not implemented")
}
func (UnimplementedExperiencesServiceServer) mustEmbedUnimplementedExperiencesServiceServer() {}

// UnsafeExperiencesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperiencesServiceServer will
// result in compilation errors.
type UnsafeExperiencesServiceServer interface {
	mustEmbedUnimplementedExperiencesServiceServer()
}

func RegisterExperiencesServiceServer(s grpc.ServiceRegistrar, srv ExperiencesServiceServer) {
	s.RegisterService(&ExperiencesService_ServiceDesc, srv)
}

func _ExperiencesService_CreateExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperiencesServiceServer).CreateExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperiencesService_CreateExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperiencesServiceServer).CreateExperience(ctx, req.(*CreateExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperiencesService_UpdateExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperiencesServiceServer).UpdateExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperiencesService_UpdateExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperiencesServiceServer).UpdateExperience(ctx, req.(*UpdateExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperiencesService_DeleteExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperiencesServiceServer).DeleteExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperiencesService_DeleteExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperiencesServiceServer).DeleteExperience(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperiencesService_GetExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperiencesServiceServer).GetExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperiencesService_GetExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperiencesServiceServer).GetExperience(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperiencesService_GetExperiences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperienceFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperiencesServiceServer).GetExperiences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperiencesService_GetExperiences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperiencesServiceServer).GetExperiences(ctx, req.(*ExperienceFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// ExperiencesService_ServiceDesc is the grpc.ServiceDesc for ExperiencesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperiencesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ExperiencesService",
	HandlerType: (*ExperiencesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExperience",
			Handler:    _ExperiencesService_CreateExperience_Handler,
		},
		{
			MethodName: "UpdateExperience",
			Handler:    _ExperiencesService_UpdateExperience_Handler,
		},
		{
			MethodName: "DeleteExperience",
			Handler:    _ExperiencesService_DeleteExperience_Handler,
		},
		{
			MethodName: "GetExperience",
			Handler:    _ExperiencesService_GetExperience_Handler,
		},
		{
			MethodName: "GetExperiences",
			Handler:    _ExperiencesService_GetExperiences_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "experiences.proto",
}
